# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: MSTICPy CI build and check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8']
    env:
      PROSPECTOR_VER: 1.3.1
    steps:
    # Print out details about the run
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJSON(job) }}
      run: echo "$JOB_CONTEXT"
    # end print details
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        if [ -f requirements-all.txt ]; then
          python -m pip install -r requirements-all.txt
        elif [ -f requirements.txt ]; then
          python -m pip install -r requirements.txt;
        fi
        python -m pip install -e .
    - name: Install test dependencies
      run: |
        python -m pip install flake8 black bandit mypy lxml pylint types-attrs
        python -m pip install pytest pytest-cov pytest-xdist pytest-check aiohttp nbconvert jupyter_contrib_nbextensions
        python -m pip install Pygments respx pytest-xdist markdown beautifulsoup4 Pillow
        python -m pip install "pandas>=1.3.0"
    - name: Prepare test dummy data
      run: |
        mkdir ~/.msticpy
        mkdir ~/.msticpy/mordor
        cp ./tests/testdata/geolite/GeoLite2-City.mmdb ~/.msticpy
        touch ~/.msticpy/GeoLite2-City.mmdb
        cp -r ./tests/testdata/mordor/* ~/.msticpy/mordor
        touch ~/.msticpy/mordor/mitre_tact_cache.pkl
        touch ~/.msticpy/mordor/mitre_tech_cache.pkl
        touch ~/.msticpy/mordor/mordor_cache.pkl
    - name: Pytest
      env:
        MAXMIND_AUTH: ${{ secrets.MAXMIND_AUTH }}
        IPSTACK_AUTH: ${{ secrets.IPSTACK_AUTH }}
        MSTICPYCONFIG: ./tests/msticpyconfig-test.yaml
        MSTICPY_BUILD_SOURCE: fork
      run: |
        pytest tests -n auto --junitxml=junit/test-${{ matrix.python-version }}-results.xml --cov=msticpy --cov-report=xml
      if: ${{ always() }}
    - name: black
      run: |
        black -t py36 --diff --check --exclude venv .
      if: ${{ always() }}
    - name: flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 msticpy --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 --max-line-length=90 --exclude=tests* . --ignore=E501,W503 --jobs=auto
      if: ${{ always() }}
    - name: pylint
      run: |
        pylint msticpy --disable=bad-continuation,duplicate-code --disable=E1135,E1101,E1133
      if: ${{ always() }}
    - name: mypy
      run: |
        mypy --ignore-missing-imports --follow-imports=silent --show-column-numbers --junit-xml junit/mypy-test-${{ matrix.python-version }}-results.xml msticpy
      if: ${{ always() }}
    - name: bandit
      run: |
        bandit -x tests -r -s B303,B404,B603,B607,B608 msticpy
      if: ${{ always() }}
    - name: flake8
      run: |
        flake8 --max-line-length=90 --exclude=tests* . --ignore=E501,W503 --jobs=auto
      if: ${{ always() }}
    - name: prospector
      run: |
        # install this separately since it uses older versions of pylint/isort
        # chain running to installation since this sometimes fails
        python -m pip install prospector[with_pyroma]==${{ env.PROSPECTOR_VER }} && prospector --ignore-paths tests --without-tool pylint
      if: ${{ always() }}
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-${{ matrix.python-version }}-results.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Upload mypy test results
      uses: actions/upload-artifact@v2
      with:
        name: Mypy results ${{ matrix.python-version }}
        path: junit/mypy-test-${{ matrix.python-version }}-results.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
